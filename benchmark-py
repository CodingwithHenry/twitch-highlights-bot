import subprocess
import time
from concurrent.futures import ThreadPoolExecutor

# Path to FFmpeg binary
FFMPEG_BIN = "ffmpeg"

# Create a dummy test video (10s, 1080p, 30fps)
def create_test_video():
    subprocess.run([
        FFMPEG_BIN, "-y",
        "-f", "lavfi", "-i", "testsrc=size=1920x1080:rate=30",
        "-t", "10",
        "test_input.mp4"
    ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

# Encode function (uses GPU if available — change 'h264_nvenc' to your codec)
def encode_video(worker_id):
    subprocess.run([
        FFMPEG_BIN, "-y",
        "-i", "test_input.mp4",
        "-c:v", "h264_nvenc",  # change to libx264 for CPU test
        "-preset", "fast",
        f"output_{worker_id}.mp4"
    ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def benchmark(max_workers):
    start = time.time()
    with ThreadPoolExecutor(max_workers=max_workers) as executor:
        for i in range(max_workers):
            executor.submit(encode_video, i)
    return time.time() - start

if __name__ == "__main__":
    print("Creating test video...")
    create_test_video()

    print("\nBenchmarking...")
    for workers in range(1, 9):  # test with 1 to 8 parallel processes
        elapsed = benchmark(workers)
        print(f"{workers} workers → {elapsed:.2f} sec")
